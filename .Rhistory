final
Exper=c(6,8,9,10,12,13,15,16)
Exper=c(6,8,9,10,12,13,15,16)
sum(Exper)
Exper=c(6,8,9,10,12,13,15,16)
sum(Exper^2)
Exper=c(1:16)
sum(Exper^2)
Exper=c(1:16)
#sum(Exper^2)
64/15(1496/16-17/4)
Exper=c(1:16)
#sum(Exper^2)
64/15*(1496/16-17/4)
Exper=c(1:16)
#sum(Exper^2)
64/15*(1496/16-17/4)
23*23/380.8
Exper=c(1:16)
#sum(Exper^2)
64/15*(1496/16-17/4)
23*23/380.8
chisq.test(23*23/380.8)
Exper=c(1:16)
#sum(Exper^2)
64/15*(1496/16-17/4)
23*23/380.8
chisq.test(23*23/380.8,1)
Exper=c(1:16)
#sum(Exper^2)
64/15*(1496/16-17/4)
23*23/380.8
pchisq(23*23/380.8,1)
Exper=c(1:16)
#sum(Exper^2)
64/15*(1496/16-17/4)
23*23/380.8
pchisq(23*23/380.8,1,lower.tail = FALSE)
Exper=c(1:16)
#sum(Exper^2)
64/15*(1496/16-17/4)
23*23/380.8
pchisq(23*23/380.8,1,lower.tail = FALSE)
64*(17)/12
Exper=c(1:16)
#sum(Exper^2)
64/15*(1496/16-17*17/4)
23*23/380.8
pchisq(23*23/380.8,1,lower.tail = FALSE)
64*(17)/12
Exper=c(1:16)
#sum(Exper^2)
64/15*(1496/16-17*17/4)
23*23/90.66667
pchisq(23*23/90.66667,1,lower.tail = FALSE)
64*(17)/12
A <- c( 0.2, 0.8, 1.9, 2.2, 2.6, 3.9, 8.2, 21.8)
B <- c( 2.8, 5.1, 7.1, 7.7, 12.3, 18.8, 27.1, 39.7)
dat <- data.frame(weight = c(A,B),
company = rep(c("A","B"), each=8))
boxplot(weight ~ company, data = dat)
A <- c( 0.2, 0.8, 1.9, 2.2, 2.6, 3.9, 8.2, 21.8)
B <- c( 2.8, 5.1, 7.1, 7.7, 12.3, 18.8, 27.1, 39.7)
dat <- data.frame(weight = c(A,B),
company = rep(c("A","B")))
boxplot(weight ~ company, data = dat)
A <- c( 0.2, 0.8, 1.9, 2.2, 2.6, 3.9, 8.2, 21.8)
B <- c( 2.8, 5.1, 7.1, 7.7, 12.3, 18.8, 27.1, 39.7)
dat <- data.frame(weight = c(A,B),
company = rep(c("A","B")))
boxplot(weight ~ company, data = dat)
dat$company <- relevel(dat$company, ref = "B")
A <- c( 0.2, 0.8, 1.9, 2.2, 2.6, 3.9, 8.2, 21.8)
B <- c( 2.8, 5.1, 7.1, 7.7, 12.3, 18.8, 27.1, 39.7)
dat <- data.frame(weight = c(A,B),
company = rep(c("A","B")))
boxplot(weight ~ company, data = dat)
wilcox.test(weight ~ company, data = dat)
Exper=c(1:16)
#sum(Exper^2)
64/15*(1496/16-17*17/4)
23*23/90.66667
pchisq( 0.211,1,lower.tail = FALSE)
64*(17)/12
1/16*(5+6+6+6+7+7+8+8)
(5+6+6+6+7+7+8+8)
1/16(5+6+6+6+7+7+8+8)-1/2
1/16*(5+6+6+6+7+7+8+8)-1/2
16*(1/16*(5+6+6+6+7+7+8+8)-1/2)
```{r}
16*(1/16*(5+6+6+6+7+7+8+8)-1/2)
1/8^3
```
# 3
```{r cars}
#library('survival')
data=read.csv('data4.csv')
head(data)
```
1/8^3
1/8^3(8^2*5+7^2+4^2+2^2)
1/8^3*(8^2*5+7^2+4^2+2^2)
A <- c( 0.2, 0.8, 1.9, 2.2, 2.6, 3.9, 8.2, 21.8)
B <- c( 2.8, 5.1, 7.1, 7.7, 12.3, 18.8, 27.1, 39.7)
dat <- data.frame(weight = c(A,B),
company = rep(c("A","B")))
boxplot(weight ~ company, data = dat)
wilcox.test(weight ~ company, data = dat)
A <- c( 0.2, 0.8, 1.9, 2.2, 2.6, 3.9, 8.2, 21.8)
B <- c( 2.8, 5.1, 7.1, 7.7, 12.3, 18.8, 27.1, 39.7)
dat <- data.frame(weight = c(A,B),
company = rep(c("A","B")))
boxplot(weight ~ company, data = dat)
wilcox.test(weight ~ company, data = dat)
16*(1/16*(5+6+6+6+7+7+8+8)-1/2)
1/8^3
16*(1/16*(5+6+6+6+7+7+8+8)-1/2)
1/(8*8^2)*(5^2+6^2+6^2+6^2+7^2+7^2+8^2+8^2)
16*(1/16*(5+6+6+6+7+7+8+8)-1/2)
1/(8*8^2)*(5^2+6^2+6^2+6^2+7^2+7^2+8^2+8^2)
64*(8*0.7597656+8*0.7011719-1/4(8+8+1))
16*(1/16*(5+6+6+6+7+7+8+8)-1/2)
1/(8*8^2)*(5^2+6^2+6^2+6^2+7^2+7^2+8^2+8^2)
64*(8*0.7597656+8*0.7011719-1/4*(8+8+1))
16*(1/16*(5+6+6+6+7+7+8+8)-1/2)
1/(8*8^2)*(5^2+6^2+6^2+6^2+7^2+7^2+8^2+8^2)
64*(8*0.7597656+8*0.7011719-1/4*(8+8+1))
45^2/476
16*(1/16*(5+6+6+6+7+7+8+8)-1/2)
1/(8*8^2)*(5^2+6^2+6^2+6^2+7^2+7^2+8^2+8^2)
64*(8*0.7597656+8*0.7011719-1/4*(8+8+1))
45^2/476
pchisq(45^2/476,1,lower.tail = FALSE)
A <- c( 0.2, 0.8, 1.9, 2.2, 2.6, 3.9, 8.2, 21.8)
B <- c( 2.8, 5.1, 7.1, 7.7, 12.3, 18.8, 27.1, 39.7)
t.test(A,B)
#library('survival')
data=read.csv('data4.csv')
head(data)
t.test(dead~z,data=data, var.equal=T)
t.test(y~z,data=data)
min(data$y)
data$y
#library('survival')
data=read.csv('data4.csv')
data
y <- data$y
y[is.na(y)] <- 1
y <- data$y
y[is.na(y)] <- 1
y
data1=data
data1$y[is.na(data1$y)] <- 1
data1=data
data1$y[is.na(data1$y)] <- 1
data1
data1=data
data1$y[is.na(data1$y)] <- 1
x=data$z
y=data$dead
wilcox.test(x~y, correct=F)
x.survival=data$z[!is.na(data$z)]
#wilcox.test(x~z, correct=F)
x.survival=data$z[!is.na(data$z)]
#wilcox.test(x~z, correct=F)
x.survival
x=data$dead
y=data$z
wilcox.test(x~y, correct=F)
x.survival=data$z[!is.na(data$y)]
#wilcox.test(x~z, correct=F)
x.survival
x=data$dead
y=data$z
wilcox.test(x~y, correct=F)
x
wilcox.test(dead~z, data=data,correct=F)
wilcox.test(y~z, data=data,correct=F)
data1=data
data1$y[is.na(data1$y)] <- 1
wilcox.test(y~z,data=data1,correct=F)
aggregate(y~z,mean,data=data1)
aggregate(y~z,c(mean,median),data=data1)
aggregate(y~z,mean,data=data1)
#aggregate(y~z,mean,data=data1)
aggregate(y~z,mean,data=data1)
aggregate(y~z,median,data=data1)
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=1
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-1
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=2
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=0.1
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-20
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-5
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-2
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-2.5
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-2.2
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-2.23
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-2.234
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-2.234
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-2.235
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-2.24
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-2.25
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-2.3
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-2.25
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-2.27
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-2.29
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-2.3
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-2.299999
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-2.3
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-2.35
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-2.299
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-2.35
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-2.3
wilcox.test(y0,y1-r, alternative="greater")
data1=data
data1$y[is.na(data1$y)] <- 3
wilcox.test(y~z,data=data1,correct=F)
data1=data
data1$y[is.na(data1$y)] <- 2.5
wilcox.test(y~z,data=data1,correct=F)
aggregate(y~z,mean,data=data1)
aggregate(y~z,median,data=data1)
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-2.3
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-2.35
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-2.25
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-2.2
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-2.23
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-2.22
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-2.2222
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-2.2
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-2.3
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-2.25
wilcox.test(y0,y1-r, alternative="greater")
y0=data1$y[data1$z==0]
y1=data1$y[data1$z==1]
r=-2.22
wilcox.test(y0,y1-r, alternative="greater")
table3c=matrix(c(17,74,18,69),nrow=2)
chisq.test(table3x)
table3c=matrix(c(17,74,18,69),nrow=2)
chisq.test(table3c)
table3c=matrix(c(17,74,18,69),nrow=2)
chisq.test(table3c, correct=FALSE)
table1a=as.table(matrix(c(31,17,43,91,46,18,23,87,77,35,66,178),nrow = 2))
table1a=as.table(matrix(c(31,17,43,91,46,18,23,87,77,35,66,178),nrow = 2))
table1a
table1a=as.table(matrix(c(31,17,43,91,46,18,23,87,77,35,66,178),nrow = 3))
table1a
table1a=as.table(matrix(c(31,17,43,91,46,18,23,87,77,35,66,178),nrow = 3,byrow=TRUE))
table1a
table1a=matrix(c(31,17,43,91,46,18,23,87,77,35,66,178),nrow = 3,byrow=TRUE)
table1a
table1a=matrix(c(31,17,43,91,46,18,23,87,77,35,66,178),nrow = 3,byrow=TRUE)
table1a
rankDFS=(1+77)/2
rankRE=(78+77+35)/2
rankDead=(77+35+1+77+35+66)/2
table1a=matrix(c(31,17,43,91,46,18,23,87,77,35,66,178),nrow = 3,byrow=TRUE)
table1a
rankDFS=(1+77)/2
rankRE=(78+77+35)/2
rankDead=(77+35+1+77+35+66)/2
rankDFS
rankRE
rankDead
rankDFS=(1+77)/2
rankRE=(78+77+35)/2
rankDead=(77+35+1+77+35+66)/2
rankDFS
rankRE
rankDead
Tb=46*rankDFS+18*rankRE+23*rankDead
ETb=87*179/2
VarTb=91*87/177(1/178*(77*rankDFS^2+ 35*rankRE^2  +66*rankDead^2))
rankDFS=(1+77)/2
rankRE=(78+77+35)/2
rankDead=(77+35+1+77+35+66)/2
rankDFS
rankRE
rankDead
Tb=46*rankDFS+18*rankRE+23*rankDead
ETb=87*179/2
VarTb=91*87/177(1/178*(77*rankDFS^2+ 35*rankRE^2  +66*rankDead^2)-179^2/4)
rankDFS=(1+77)/2
rankRE=(78+77+35)/2
rankDead=(77+35+1+77+35+66)/2
rankDFS
rankRE
rankDead
Tb=46*rankDFS+18*rankRE+23*rankDead
ETb=87*179/2
VarTb=91*87/177*(1/178*(77*rankDFS^2+ 35*rankRE^2  +66*rankDead^2)-179^2/4)
rankDFS=(1+77)/2
rankRE=(78+77+35)/2
rankDead=(77+35+1+77+35+66)/2
rankDFS
rankRE
rankDead
Tb=46*rankDFS+18*rankRE+23*rankDead
ETb=87*179/2
VarTb=91*87/177*(1/178*(77*rankDFS^2+ 35*rankRE^2  +66*rankDead^2)-179^2/4)
Test.statistics=(Tb-ETb)^2/VarTb
rankDFS=(1+77)/2
rankRE=(78+77+35)/2
rankDead=(77+35+1+77+35+66)/2
rankDFS
rankRE
rankDead
Tb=46*rankDFS+18*rankRE+23*rankDead
ETb=87*179/2
VarTb=91*87/177*(1/178*(77*rankDFS^2+ 35*rankRE^2  +66*rankDead^2)-179^2/4)
Test.statistics=(Tb-ETb)^2/VarTb
pchisq(Test.statistics,1,lower.tail = FALSE)
Tb, ETb,VarTb,Test.statistics
Tb
ETb
VarTb
Test.statistics
pchisq(0.017,1,lower.tail = FALSE)
pchisq(0.017,1,lower.tail = FALSE)
pchisq(0.017,2,lower.tail = FALSE)
Exper=c(1:16)
#sum(Exper^2)
64/15*(1496/16-17*17/4)
21^2/90.66667
pchisq(21^2/90.66667,1,lower.tail = FALSE)
64*(17)/12
sampledata <- read.csv(file = 'train_sample.csv')
head(sampledata)
knit_with_parameters("~/Documents/GitHub/STAT605_Project/proposal.Rmd")
### random forest using both data
rfboth <-randomForest(is_attributed~., data=both)
library(ggplot2)
library(ROSE)
library(randomForest)
library(caret)
library(e1071)
rm(list=ls())
#library(smotefamily)#SMOTE Balancing
#rm(list=ls())
dir=getwd()
#setwd(dir)
setwd("/Users/wanxintu/Documents/GitHub/STAT605_Project")
mydata <- read.csv('train_sample.csv')
####https://www.kaggle.com/code/swamysm/fraud-detection-by-random-forest-dt-and-svm
####App was downloaded v/s App id for marketing
p2=ggplot(mydata,aes(x=app,fill=is_attributed))+
geom_density()+facet_grid(is_attributed~.)+
scale_x_continuous(breaks = c(0,50,100,200,300,400))+
ggtitle("Application ID v/s Is_attributed")+
xlab("App ID") +
labs(fill = "is_attributed")
p2
###App was downloaded vs OS version id of user mobile phone
p5=ggplot(mydata,aes(x=os,fill=is_attributed))+
geom_density()+facet_grid(is_attributed~.)+
scale_x_continuous(breaks = c(0,50,100,200,300,400))+
ggtitle("Os version v/s Is_attributed ")+
xlab("Os version") +
labs(fill = "is_attributed")
p5
###App was downloaded v/s ip address of click.
p8=ggplot(mydata,aes(x=ip,fill=is_attributed))+
geom_density()+facet_grid(is_attributed~.)+
scale_x_continuous(breaks = c(0,50,100,200,300,400))+
ggtitle("IP Address v/s Is_attributed")+
xlab("Ip Adresss of click") +
labs(fill = "is_attributed")
#data banlancing
barplot(prop.table(table(mydata$is_attributed)),
col = rainbow(2),
ylim = c(0, 1),
main = "is_attribute Distribution")
## over sampling 把数据变成1:1
over <- ovun.sample(is_attributed~., data = mydata, method = "over")$data
table(over$is_attributed)
## both sampling (over & under)
both <- ovun.sample(is_attributed~., data=mydata, method = "both")$data
table(both$is_attributed)
### random forest using both data
rfboth <-randomForest(is_attributed~., data=both)
confusionMatrix(predict(rfboth, mydata), mydata$is_attributed, positive = '1')
### random forest using both data
rfboth <-randomForest(is_attributed~., data=both)
yes
# 下面这里的数据应该用 testdata
confusionMatrix(predict(rfboth, mydata), mydata$is_attributed, positive = '1')
#data balancing
## check imbalance
table(mydata$is_attributed)
## ROSE function Random Over sampling examples
rose <- ROSE(is_attributed~., data =mydata)$data
table(rose$is_attributed)
library(ROSE)
## ROSE function Random Over sampling examples
rose <- ROSE(is_attributed~., data =mydata)$data
## ROSE function Random Over sampling examples
rose <- ROSE(is_attributed~., data =mydata, N=10000)$data
table(rose$is_attributed)
#
install.packages("imbalanced-learn")
#install.packages("imbalanced-learn")
install.packages("imbalanced-learn")
#install.packages("imbalanced-learn")
library(imbalanced-learn)
library(imbalance)
